- name: Ensure docker osf logrotate config
  template:
    src: logrotate.j2
    dest: /etc/logrotate.d/osf
    owner: root
    group: root
    mode: 0644
  tags:
    - install
    - settings


- name: Ensure docker osf directories exist
  sudo: yes
  file:
    state: directory
    path: "{{ item }}"
  with_items:
    - "{{ docker_osf_conf_dir }}"
    - "{{ docker_osf_data_dir }}"
    - "{{ docker_osf_mfr_dir }}"
    - "{{ docker_osf_log_dir }}"
    # TBD ....
  tags:
    - install
    - upgrade


# all local.py settings .......................
# - name: Copy docker osf configuration settings
#   copy:
#     dest: "{{ docker_osf_conf_dir }}/osf-{{ docker_osf_env }}.json"
#     src: "~/.cos/osf-{{ docker_server_osf_env }}.json"
#     mode: 0660
#   tags:
#     - install
#     - settings
#     - upgrade


- name: Restart docker osf celery container
  sudo: yes
  shell: "docker restart {{ docker_osf_celery_name }}_{{ item }}"
  with_sequence: count={{ docker_osf_celery_instances }}
  when: docker_osf_celery_instances > 0
  tags:
    - restart


- name: Restart docker osf server container
  sudo: yes
  shell: "docker restart {{ docker_osf_server_name }}_{{ item }}"
  with_sequence: count={{ docker_osf_server_instances }}
  when: docker_osf_server_instances > 0
  tags:
    - restart


# - name: Run docker osf celery container
#   docker:
#     name: "{{ docker_osf_celery_name }}_{{ item }}"
#     state: running
#     hostname: "{{ hostname_name }}-celery{{ item }}"
#     image: "centerforopenscience/osf:latest"
#     command: '/bin/bash -c "invoke celery 2>&1 | tee -a /log/{{ docker_osf_celery_name }}_{{ item }}.log"'
#     restart_policy: always
#     env:
#       ENV: "{{ docker_osf_env }}"
#       SOURCE_BRANCH: "{{ docker_osf_source_branch }}"
#       SOURCE_REPO: "{{ docker_osf_source_repo }}"
#     links:
#       - "{{ docker_osf_rabbitmq_name }}:rabbitmq"
#     volumes:
#       - "{{ docker_osf_mfrcache_dir }}:/data/mfrcache"
#       - "{{ docker_osf_mfrtemp_dir }}:/data/mfrtemp"
#       # - "{{ docker_osf_conf_dir }}/waterbutler-{{ docker_waterbutler_env }}.json:/home/.cos/waterbutler-{{ docker_waterbutler_env }}.json"
#       - "{{ docker_osf_server_log_dir }}:/log"
#   with_sequence: count={{ docker_osf_celery_instances }}
#   when: docker_osf_celery_instances > 0
#   tags:
#     - install
#     - upgrade


# - name: Run docker osf server container
#   docker:
#     name: "{{ docker_osf_server_name }}_{{ item }}"
#     state: running
#     hostname: "{{ hostname_name }}-server{{ item }}"
#     image: "centerforopenscience/osf:latest"
#     command: '/bin/bash -c "invoke server 2>&1 | tee -a /log/{{ docker_osf_server_name }}_{{ item }}.log"'
#     # expose:
#     #   - "{{ (docker_osf_server_start_port | int) + (item | int) }}"
#     ports:
#       - "{{ (docker_osf_server_start_port | int) + (item | int) - 1 }}:7777"
#     env:
#       ENV: "{{ docker_osf_env }}"
#       SOURCE_BRANCH: "{{ docker_osf_source_branch }}"
#       SOURCE_REPO: "{{ docker_osf_source_repo }}"
#     links:
#       - "{{ docker_osf_redis_name }}:redis"
#       - "{{ docker_osf_rabbitmq_name }}:rabbitmq"
#     restart_policy: always
#     volumes:
#       # - "{{ docker_osf_osfstorage_pending_dir }}:/data/osfstorage/pending"
#       # - "{{ docker_waterbutler_osfstorage_complete_dir }}:/data/osfstorage/complete"
#       # - "{{ docker_waterbutler_conf_dir }}/waterbutler-{{ docker_waterbutler_env }}.json:/home/.cos/waterbutler-{{ docker_waterbutler_env }}.json"
#       # - "{{ docker_waterbutler_log_dir }}:/log"
#   with_sequence: count={{ docker_osf_server_instances }}
#   when: docker_osf_server_instances > 0
#   tags:
#     - install
#     - upgrade
