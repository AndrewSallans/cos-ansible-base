- name: Ensure docker scrapi logrotate config
  template:
    src: logrotate.j2
    dest: /etc/logrotate.d/scrapi
    owner: root
    group: root
    mode: 0644
  tags:
    - install
    - settings


- name: Ensure docker scrapi directories exist
  sudo: yes
  file:
    state: directory
    path: "{{ item }}"
  with_items:
    - "{{ docker_scrapi_log_dir }}"
  tags:
    - install
    - upgrade


- name: Copy docker scrapi configuration settings
  copy:
    src: "~/.cos/scrapi/staging/local.py"
    dest: "{{ docker_scrapi_conf_file }}"
    mode: 0660
  tags:
    - install
    - settings
    - upgrade


- name: Restart docker scrapi beat container
  sudo: yes
  shell: "docker restart {{ docker_scrapi_beat_name }}"
  tags:
    - restart


- name: Restart docker scrapi server container
  sudo: yes
  shell: "docker restart {{ docker_scrapi_server_name }}_{{ item }}"
  with_sequence: docker_scrapi_server_instances
  when: docker_scrapi_server_instances > 0
  tags:
    - restart


- name: Restart docker scrapi worker container
  sudo: yes
  shell: "docker restart {{ docker_scrapi_worker_name }}_{{ item }}"
  with_sequence: docker_scrapi_server_instances
  when: docker_scrapi_worker_instances > 0
  tags:
    - restart


- name: Run docker scrapi beat container
  docker:
    name: "{{ docker_scrapi_beat_name }}"
    state: running
    image: "centerforopenscience/scrapi:latest"
    command: "/bin/bash -c 'invoke beat 2>&1 | tee -a /log/{{ docker_scrapi_beat_name }}.log'"
    restart_policy: always
    hostname: "{{ hostname_name }}-beat"
    env:
      SOURCE_BRANCH: "{{ docker_scrapi_source_branch }}"
      SOURCE_REPO: "{{ docker_scrapi_source_repo }}"
      ELASTICSEARCH_PORT_9200_TCP_ADDR: "{{ docker_scrapi_elasticsearch_addr }}"
      ELASTICSEARCH_PORT_9200_TCP_PORT: "{{ docker_scrapi_elasticsearch_port }}"
    links:
      - "{{ docker_scrapi_cassandra_name }}:cassandra"
      - "{{ docker_scrapi_rabbitmq_name }}:rabbitmq"
    volumes:
      - "{{ docker_scrapi_conf_file }}:/home/python/.cos/local.py"
      - "{{ docker_scrapi_log_dir }}:/log"
  tags:
    - install
    - upgrade


- name: Run docker scrapi worker container
  docker:
    name: "{{ docker_scrapi_worker_name }}_{{ item }}"
    state: running
    image: "centerforopenscience/scrapi:latest"
    command: '/bin/bash -c "invoke worker 2>&1 | tee -a /log/{{ docker_scrapi_worker_name }}_{{ item }}.log"'
    restart_policy: always
    hostname: "{{ hostname_name }}-worker{{ item }}"
    env:
      SOURCE_BRANCH: "{{ docker_scrapi_source_branch }}"
      SOURCE_REPO: "{{ docker_scrapi_source_repo }}"
      ELASTICSEARCH_PORT_9200_TCP_ADDR: "{{ docker_scrapi_elasticsearch_addr }}"
      ELASTICSEARCH_PORT_9200_TCP_PORT: "{{ docker_scrapi_elasticsearch_port }}"
    links:
      - "{{ docker_scrapi_cassandra_name }}:cassandra"
      - "{{ docker_scrapi_fluentd_name }}:fluentd"
      - "{{ docker_scrapi_rabbitmq_name }}:rabbitmq"
    volumes:
      - "{{ docker_scrapi_conf_file }}:/home/python/.cos/local.py"
      - "{{ docker_scrapi_log_dir }}:/log"
  with_sequence: docker_scrapi_worker_instances
  when: docker_scrapi_worker_instances > 0
  tags:
    - install
    - upgrade


- name: Run docker scrapi server container
  docker:
    name: "{{ docker_scrapi_server_name }}_{{ item }}"
    state: running
    image: "centerforopenscience/scrapi:latest"
    command: '/bin/bash -c "invoke server 2>&1 | tee -a /log/{{ docker_scrapi_server_name }}_{{ item }}.log"'
    restart_policy: always
    hostname: "{{ hostname_name }}-server{{ item }}"
    expose: "{{ docker_scrapi_server_expose }}"
    ports: "{{ docker_scrapi_server_ports }}"
    env:
      SOURCE_BRANCH: "{{ docker_scrapi_source_branch }}"
      SOURCE_REPO: "{{ docker_scrapi_source_repo }}"
      ELASTICSEARCH_PORT_9200_TCP_ADDR: "{{ docker_scrapi_elasticsearch_addr }}"
      ELASTICSEARCH_PORT_9200_TCP_PORT: "{{ docker_scrapi_elasticsearch_port }}"
    links:
      - "{{ docker_scrapi_cassandra_name }}:cassandra"
      - "{{ docker_scrapi_rabbitmq_name }}:rabbitmq"
    volumes:
      - "{{ docker_scrapi_conf_file }}:/home/python/.cos/local.py"
      - "{{ docker_scrapi_log_dir }}:/log"
  with_sequence: docker_scrapi_server_instances
  when: docker_scrapi_server_instances > 0
  tags:
    - install
    - upgrade
